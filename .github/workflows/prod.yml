name: Build, Test and Deploy to Prod (Digital Ocean)

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
      - x-releases
  workflow_dispatch:

env:
  SQLX_OFFLINE: true

jobs:
  build:
    runs-on: ubuntu-latest

    # Service containers to run with the `test` container job
    services:
      postgres:                            # Label used to access the service container
        image: postgres:15.2-alpine        # Docker Hub image
        env:                               # Environment variables scoped only for the `postgres` element
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:                             # When mapping ports w/ the ports keyword, GitHub uses the --publish command
          - ${{vars.POSTGRES_PORT}}:5432   # Pub container ports to host. Opens tcp port 5432 on host + container
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code                  # Checkout code from the repository
      uses: actions/checkout@v2

    - name: Cache dependencies             # Cache dependencies to speed up build times
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test  --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      run: |
        export JWT_SECRET=${{secrets.JWT_SECRET}}
        export DATABASE_URL=postgres://postgres:${{secrets.POSTGRES_PASSWORD}}@localhost:${{vars.POSTGRES_PORT}}
        cargo build --verbose
        cargo test  --verbose

    - name: Set up Docker Buildx                        # Set up Docker Buildx for multi-platform builds
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install sshpass
      run: sudo apt install sshpass

    - name: Copy compose.yml to droplet
      run: sudo sshpass -v -p '${{secrets.DROPLET_PASSWORD}}' scp -o StrictHostKeyChecking=no compose.yml root@${{vars.DROPLET_IP}}:~

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          cd ~
          export AUTH_SERVICE_IP=${{   vars.DROPLET_IP              }}
          export JWT_SECRET=${{        secrets.JWT_SECRET           }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD    }}
          export POSTGRES_PORT=${{     vars.POSTGRES_PORT           }}
          export POSTMARK_AUTH_TOKEN=${{secrets.POSTMARK_AUTH_TOKEN }}
          docker compose down
          docker compose pull
          docker compose up -d

